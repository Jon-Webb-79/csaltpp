<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classslt_1_1MatrixBase" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>slt::MatrixBase</compoundname>
    <derivedcompoundref refid="classslt_1_1DenseMatrix" prot="public" virt="non-virtual">slt::DenseMatrix&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classslt_1_1SparseCOOMatrix" prot="public" virt="non-virtual">slt::SparseCOOMatrix&lt; T &gt;</derivedcompoundref>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classslt_1_1MatrixBase_1a3bbb4cd026c2c1da1ba0881c918630b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual slt::MatrixBase&lt; T &gt;::~MatrixBase</definition>
        <argsstring>()=default</argsstring>
        <name>~MatrixBase</name>
        <briefdescription>
<para>Virtual destructor for safe polymorphic deletion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="667" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1MatrixBase_1af5247088bf3743574e25430da458ff46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t slt::MatrixBase&lt; T &gt;::rows</definition>
        <argsstring>() const =0</argsstring>
        <name>rows</name>
        <reimplementedby refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6">rows</reimplementedby>
        <reimplementedby refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa">rows</reimplementedby>
        <briefdescription>
<para>Returns the number of rows in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of rows. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="675" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1MatrixBase_1acee40c97e44474a9619b808b63d1868b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t slt::MatrixBase&lt; T &gt;::cols</definition>
        <argsstring>() const =0</argsstring>
        <name>cols</name>
        <reimplementedby refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2">cols</reimplementedby>
        <reimplementedby refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866">cols</reimplementedby>
        <briefdescription>
<para>Returns the number of columns in the matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of columns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="683" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1MatrixBase_1a5fe460dc2d97ee440c32635d5f3192fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>T</type>
        <definition>virtual T slt::MatrixBase&lt; T &gt;::get</definition>
        <argsstring>(std::size_t row, std::size_t col) const =0</argsstring>
        <name>get</name>
        <reimplementedby refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71">get</reimplementedby>
        <reimplementedby refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e">get</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Retrieves the value at a specific matrix coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at the specified location. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="693" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1MatrixBase_1a2925cbdba8ec46c258f8d8e1fb1b730d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void slt::MatrixBase&lt; T &gt;::set</definition>
        <argsstring>(std::size_t row, std::size_t col, T value)=0</argsstring>
        <name>set</name>
        <reimplementedby refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e">set</reimplementedby>
        <reimplementedby refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53">set</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value at a specific matrix coordinate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to assign. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="703" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1MatrixBase_1a10ca9a5de506b53de715596507c77321" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt; T &gt; &gt;</type>
        <definition>virtual std::unique_ptr&lt;MatrixBase&lt;T&gt; &gt; slt::MatrixBase&lt; T &gt;::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classslt_1_1DenseMatrix_1a66bf4b77281db6ded265fc44f8b3a309">clone</reimplementedby>
        <reimplementedby refid="classslt_1_1SparseCOOMatrix_1a532cedb759d6e7e633c4a3ad84f17c69">clone</reimplementedby>
        <briefdescription>
<para>Creates a polymorphic copy of the matrix object. </para>
        </briefdescription>
        <detaileddescription>
<para>Useful for cloning objects when only a base class pointer/reference is available.</para>
<para><simplesect kind="return"><para>A std::unique_ptr to a new MatrixBase-derived object with the same contents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="713" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1MatrixBase_1a069249b28295c9776df81efed6076589" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool slt::MatrixBase&lt; T &gt;::is_initialized</definition>
        <argsstring>(std::size_t row, std::size_t col) const =0</argsstring>
        <name>is_initialized</name>
        <reimplementedby refid="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44">is_initialized</reimplementedby>
        <reimplementedby refid="classslt_1_1DenseMatrix_1aecc5061bed3861b391292058e43ae1b2">is_initialized</reimplementedby>
        <param>
          <type>std::size_t</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>col</declname>
        </param>
        <briefdescription>
<para>Determines if a row column pair is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialized false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="721" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract base class for matrix types. </para>
    </briefdescription>
    <detaileddescription>
<para>Provides a uniform interface for different matrix implementations (e.g., dense, sparse), supporting essential matrix operations such as element access, mutation, and cloning.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric type of the matrix elements (e.g., float, double). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>slt::MatrixBase&lt; T &gt;</label>
        <link refid="classslt_1_1MatrixBase"/>
      </node>
      <node id="3">
        <label>slt::SparseCOOMatrix&lt; T &gt;</label>
        <link refid="classslt_1_1SparseCOOMatrix"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>slt::DenseMatrix&lt; T &gt;</label>
        <link refid="classslt_1_1DenseMatrix"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="662" column="5" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="662" bodyend="722"/>
    <listofallmembers>
      <member refid="classslt_1_1MatrixBase_1a10ca9a5de506b53de715596507c77321" prot="public" virt="pure-virtual"><scope>slt::MatrixBase</scope><name>clone</name></member>
      <member refid="classslt_1_1MatrixBase_1acee40c97e44474a9619b808b63d1868b" prot="public" virt="pure-virtual"><scope>slt::MatrixBase</scope><name>cols</name></member>
      <member refid="classslt_1_1MatrixBase_1a5fe460dc2d97ee440c32635d5f3192fc" prot="public" virt="pure-virtual"><scope>slt::MatrixBase</scope><name>get</name></member>
      <member refid="classslt_1_1MatrixBase_1a069249b28295c9776df81efed6076589" prot="public" virt="pure-virtual"><scope>slt::MatrixBase</scope><name>is_initialized</name></member>
      <member refid="classslt_1_1MatrixBase_1af5247088bf3743574e25430da458ff46" prot="public" virt="pure-virtual"><scope>slt::MatrixBase</scope><name>rows</name></member>
      <member refid="classslt_1_1MatrixBase_1a2925cbdba8ec46c258f8d8e1fb1b730d" prot="public" virt="pure-virtual"><scope>slt::MatrixBase</scope><name>set</name></member>
      <member refid="classslt_1_1MatrixBase_1a3bbb4cd026c2c1da1ba0881c918630b1" prot="public" virt="virtual"><scope>slt::MatrixBase</scope><name>~MatrixBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
