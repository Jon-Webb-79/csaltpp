<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classslt_1_1SparseCOOMatrix" kind="class" language="C++" prot="public">
    <compoundname>slt::SparseCOOMatrix</compoundname>
    <basecompoundref refid="classslt_1_1MatrixBase" prot="public" virt="non-virtual">slt::MatrixBase&lt; T &gt;</basecompoundref>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <innerclass refid="structslt_1_1SparseCOOMatrix_1_1COOComparator" prot="private">slt::SparseCOOMatrix::COOComparator</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; slt::SparseCOOMatrix&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>Flat row-major storage of matrix elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2241" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::rows_</definition>
        <argsstring></argsstring>
        <name>rows_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2242" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::cols_</definition>
        <argsstring></argsstring>
        <name>cols_</name>
        <briefdescription>
<para>Matrix dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2242" column="27" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::size_t &gt;</type>
        <definition>std::vector&lt;std::size_t&gt; slt::SparseCOOMatrix&lt; T &gt;::row</definition>
        <argsstring></argsstring>
        <name>row</name>
        <briefdescription>
<para>A vector containing row indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2245" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::size_t &gt;</type>
        <definition>std::vector&lt;std::size_t&gt; slt::SparseCOOMatrix&lt; T &gt;::col</definition>
        <argsstring></argsstring>
        <name>col</name>
        <briefdescription>
<para>A vector containing column indices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2246" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool slt::SparseCOOMatrix&lt; T &gt;::fast_set</definition>
        <argsstring></argsstring>
        <name>fast_set</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>true if vectors are optimized for insertation, false if optimized for retrieval </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2247" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a5bc2a8f7766afa09ceaf18d83447875f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the total number of elments in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2259" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1aeffd4e5b6e6d980855f1dc31d964188b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::nonzero_count</definition>
        <argsstring>() const</argsstring>
        <name>nonzero_count</name>
        <briefdescription>
<para>Returns the size of the data array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2260" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2260" bodyend="2259"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::row_index</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>row_index</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2261" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2261" bodyend="2264"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::col_index</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>col_index</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2266" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2266" bodyend="2269"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a7cf8f962d4fa6ec16575c0e7031e3447" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T slt::SparseCOOMatrix&lt; T &gt;::value</definition>
        <argsstring>(std::size_t i) const</argsstring>
        <name>value</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2271" column="11" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2271" bodyend="2274"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1afdf817cb3a1cfdd63825edd72b7af332" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(std::size_t r, std::size_t c, bool fastInsert=true)</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fastInsert</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs an empty sparse COO matrix with given dimensions. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes internal storage with a small reserved capacity and sets the fast insertion mode according to <computeroutput>fastInsert</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fastInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, enables fast insertion mode (default: true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2285" column="18" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2285" bodyend="2290"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a0556e77c2ab536d1e9f98924ebc00325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; T &gt;&gt; &amp;vec, bool fastInsert=true)</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; T &gt;&gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fastInsert</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a sparse COO matrix from a 2D std::vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Non-zero elements from the input vector are inserted into the sparse matrix. If <computeroutput>fastInsert</computeroutput> is true, elements are inserted in append mode and <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize()</ref></computeroutput> must be called manually before sorted access (e.g., <ref refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" kindref="member">get()</ref>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A 2D vector representing the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fastInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables fast insertion mode if true (default: true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if rows have inconsistent lengths. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2304" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2304" bodyend="2315"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a1823148f7dd13b5e31c55c218d31f8ab" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>Cols</declname>
            <defname>Cols</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(const std::array&lt; std::array&lt; T, Cols &gt;, Rows &gt; &amp;arr, bool fastInsert=true)</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type>const std::array&lt; std::array&lt; T, Cols &gt;, Rows &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fastInsert</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a sparse COO matrix from a fixed-size std::array. </para>
        </briefdescription>
        <detaileddescription>
<para>Non-zero values in the 2D array are inserted into the matrix.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the static array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cols</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the static array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed-size array of values to initialize the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fastInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables fast insertion mode if true (default: true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2329" column="18" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2329" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1afdf93130e5698de91ab00c3640497e7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; initList, bool fastInsert=true)</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt;</type>
          <declname>initList</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fastInsert</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a sparse COO matrix from a nested initializer list. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows convenient initialization using brace-enclosed lists. Only non-zero elements are stored. Rows must be of consistent length.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initList</parametername>
</parameternamelist>
<parameterdescription>
<para>Nested initializer list (e.g., <computeroutput>{{1, 0}, {0, 2}}</computeroutput>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fastInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables fast insertion mode if true (default: true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if inner lists have inconsistent sizes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2350" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2350" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1ae770b21eed338ffb9befcfdd9980018e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;flat_data, std::size_t r, std::size_t c, bool fastInsert=true)</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>flat_data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fastInsert</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Constructs a sparse COO matrix from a flat vector in row-major order. </para>
        </briefdescription>
        <detaileddescription>
<para>Only non-zero values are inserted into the matrix. The resulting matrix will include only the explicitly stored entries. If <computeroutput>fastInsert</computeroutput> is true, entries are added in append mode and require <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize()</ref></computeroutput> before sorted access.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flat_data</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D vector in row-major order. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fastInsert</parametername>
</parameternamelist>
<parameterdescription>
<para>Enables fast insertion mode if true (default: true). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the size of flat_data != r * c. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2380" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2380" bodyend="2392"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1aca17fa945fb3d058e784e9c448f257f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(const SparseCOOMatrix&lt; T &gt; &amp;other)</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type>const <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor for <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a new <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref> as a deep copy of the provided matrix. All internal data structures (values, row/column indices, flags) are duplicated, preserving the state of the original matrix while ensuring full independence.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref> instance to copy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This performs a deep copy. Changes to the new matrix will not affect the original. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2406" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2406" bodyend="2413"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a6c524c58afeb267a0e3cd0bddc2b9be3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>slt::SparseCOOMatrix&lt; T &gt;::SparseCOOMatrix</definition>
        <argsstring>(SparseCOOMatrix&lt; T &gt; &amp;&amp;other) noexcept</argsstring>
        <name>SparseCOOMatrix</name>
        <param>
          <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor for <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructs a new sparse matrix by transferring ownership of data from another matrix. This constructor performs a shallow move of internal vectors and resets the source matrix to a default, empty state.</para>
<para>This is more efficient than the copy constructor, as it avoids deep copying of data and instead reuses existing memory buffers. After the move, the source matrix is left in a valid but unspecified state (typically empty).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to move from. After the operation, <computeroutput>other</computeroutput> is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The <computeroutput>fast_set</computeroutput> flag is also transferred and reset in the source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2431" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2431" bodyend="2438"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1abb078adcd4c95de5d7bddbe438a06316" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T slt::SparseCOOMatrix&lt; T &gt;::operator()</definition>
        <argsstring>(std::size_t r, std::size_t c) const</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Accesses a matrix element (read-only). </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the value at the specified row and column. If the element has not been set, throws an exception.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index (zero-based). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index (zero-based). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value at the given position. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if indices are out of bounds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the element is uninitialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2453" column="11" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2453" bodyend="2455"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a1dc02d00cac074d3771223b358de6152" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool slt::SparseCOOMatrix&lt; T &gt;::operator==</definition>
        <argsstring>(const SparseCOOMatrix&lt; T &gt; &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2494" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2494" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a8066b8bab1b1db44570b043591547447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
        <definition>SparseCOOMatrix&lt;T&gt;&amp; slt::SparseCOOMatrix&lt; T &gt;::operator=</definition>
        <argsstring>(const SparseCOOMatrix&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Deep copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Copies all metadata and contents (rows, cols, data, etc.) from another <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>. The two matrices become fully independent.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Source matrix to copy from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to this matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2524" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2524" bodyend="2535"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1ad7851db1ffece701e976625710f88aaf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
        <definition>SparseCOOMatrix&lt;T&gt;&amp; slt::SparseCOOMatrix&lt; T &gt;::operator=</definition>
        <argsstring>(SparseCOOMatrix&lt; T &gt; &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para>Transfers resources from another <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>, leaving the source in a valid but empty state. Enables efficient transfer of large matrices.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Source matrix to move from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to this matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2547" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2547" bodyend="2558"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a92b8c482627448d29d112af92da1afb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref>&lt; T &gt;</type>
        <definition>DenseMatrix&lt;T&gt; slt::SparseCOOMatrix&lt; T &gt;::operator+</definition>
        <argsstring>(const SparseCOOMatrix&lt; T &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2587" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2587" bodyend="2608"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1add1bd1320cb996c904f3f56d6897c9cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref></type>
        <definition>SparseCOOMatrix slt::SparseCOOMatrix&lt; T &gt;::operator+</definition>
        <argsstring>(T scalar) const</argsstring>
        <name>operator+</name>
        <param>
          <type>T</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2627" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2627" bodyend="2633"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a869a28d52e8cf7658dc8cc87a9bfcc6d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref>&lt; T &gt;</type>
        <definition>DenseMatrix&lt;T&gt; slt::SparseCOOMatrix&lt; T &gt;::operator-</definition>
        <argsstring>(const SparseCOOMatrix&lt; T &gt; &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2662" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2662" bodyend="2683"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a1db595de4e0815f91d5aba9765b942de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref></type>
        <definition>SparseCOOMatrix slt::SparseCOOMatrix&lt; T &gt;::operator-</definition>
        <argsstring>(T scalar) const</argsstring>
        <name>operator-</name>
        <param>
          <type>T</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2702" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2702" bodyend="2708"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a562d500b4202fbc2afb7123571ac6d60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref></type>
        <definition>SparseCOOMatrix slt::SparseCOOMatrix&lt; T &gt;::operator*</definition>
        <argsstring>(const SparseCOOMatrix &amp;other) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Performs element-wise multiplication of two sparse matrices. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiplies corresponding non-zero elements where both matrices store a value. Returns a new <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref> containing only the overlapping non-zero positions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref> to multiply with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref> containing the element-wise product. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrix dimensions do not match. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2720" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2720" bodyend="2737"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::rows</definition>
        <argsstring>() const override</argsstring>
        <name>rows</name>
        <reimplements refid="classslt_1_1MatrixBase_1af5247088bf3743574e25430da458ff46">rows</reimplements>
        <briefdescription>
<para>Returns the number of rows in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2742" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2742" bodyend="2742"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t slt::SparseCOOMatrix&lt; T &gt;::cols</definition>
        <argsstring>() const override</argsstring>
        <name>cols</name>
        <reimplements refid="classslt_1_1MatrixBase_1acee40c97e44474a9619b808b63d1868b">cols</reimplements>
        <briefdescription>
<para>Returns the number of columns in the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2748" column="21" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2748" bodyend="2748"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>T</type>
        <definition>T slt::SparseCOOMatrix&lt; T &gt;::get</definition>
        <argsstring>(std::size_t r, std::size_t c) const override</argsstring>
        <name>get</name>
        <reimplements refid="classslt_1_1MatrixBase_1a5fe460dc2d97ee440c32635d5f3192fc">get</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Gets a matrix element. </para>
        </briefdescription>
        <detaileddescription>
<para>Implements the <ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref> interface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value at (row, col). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2760" column="11" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2760" bodyend="2789"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a532cedb759d6e7e633c4a3ad84f17c69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt; T &gt; &gt;</type>
        <definition>std::unique_ptr&lt;MatrixBase&lt;T&gt; &gt; slt::SparseCOOMatrix&lt; T &gt;::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <reimplements refid="classslt_1_1MatrixBase_1a10ca9a5de506b53de715596507c77321">clone</reimplements>
        <briefdescription>
<para>Creates a polymorphic deep copy of this matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unique pointer to the copied matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2797" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2797" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void slt::SparseCOOMatrix&lt; T &gt;::set</definition>
        <argsstring>(std::size_t r, std::size_t c, T value) override</argsstring>
        <name>set</name>
        <reimplements refid="classslt_1_1MatrixBase_1a2925cbdba8ec46c258f8d8e1fb1b730d">set</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets a value in the matrix at the given (row, column) index. </para>
        </briefdescription>
        <detaileddescription>
<para>If <computeroutput>fast_set</computeroutput> is true, the value is appended without checking for duplicates or maintaining order (O(1) insertion). This is efficient for bulk construction but requires calling <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize()</ref></computeroutput> before reliable queries.</para>
<para>If <computeroutput>fast_set</computeroutput> is false, the method performs a binary search and inserts the value at the correct sorted position. Duplicate insertions will throw.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index of the element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index of the element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to insert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on successful insertion. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if indices are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if value already exists and <computeroutput>fast_set</computeroutput> is false. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2819" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2819" bodyend="2850"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a30d1204d80d8b51f20217c5af322a2da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void slt::SparseCOOMatrix&lt; T &gt;::update</definition>
        <argsstring>(std::size_t r, std::size_t c, T value)</argsstring>
        <name>update</name>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Updates an existing value in the matrix at (row, column). </para>
        </briefdescription>
        <detaileddescription>
<para>Performs a binary search for the target index. If the element is found, the value is updated in-place. If the element does not exist, an exception is thrown (you must call <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set()</ref></computeroutput> first).</para>
<para>This method requires <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize()</ref></computeroutput> to have been called if the matrix was initially constructed in fast insertion mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index of the element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index of the element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to assign to the existing element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True on successful update. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if indices are invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the element is not already set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2870" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2870" bodyend="2891"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool slt::SparseCOOMatrix&lt; T &gt;::is_initialized</definition>
        <argsstring>(std::size_t r, std::size_t c) const override</argsstring>
        <name>is_initialized</name>
        <reimplements refid="classslt_1_1MatrixBase_1a069249b28295c9776df81efed6076589">is_initialized</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks whether an element at (row, column) has been initialized. </para>
        </briefdescription>
        <detaileddescription>
<para>Searches for the target index using binary search. The result is reliable only if <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize()</ref></computeroutput> has been called after using fast insertion mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Row index of the element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Column index of the element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the element has been initialized (i.e., set or updated). </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if indices are invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2905" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2905" bodyend="2933"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void slt::SparseCOOMatrix&lt; T &gt;::finalize</definition>
        <argsstring>()</argsstring>
        <name>finalize</name>
        <briefdescription>
<para>Finalizes the internal COO representation for querying. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is required after using fast insertion mode (<computeroutput>fast_set = true</computeroutput>) to sort the (row, column, value) triplets into lexicographic order. Once finalized, efficient binary search and reliable get/update/is_initialized operations are enabled.</para>
<para>This method performs a stable sort and disables fast insertion mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2946" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2946" bodyend="2974"/>
      </memberdef>
      <memberdef kind="function" id="classslt_1_1SparseCOOMatrix_1a0ed0440765b5f86cf842ae4b67b46621" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool slt::SparseCOOMatrix&lt; T &gt;::set_fast</definition>
        <argsstring>() const</argsstring>
        <name>set_fast</name>
        <briefdescription>
<para>Returns whether the matrix is in fast insertion mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This method reports the current status of the <computeroutput>fast_set</computeroutput> flag. When true, the matrix is in fast insertion mode—entries can be appended quickly without maintaining order or checking for duplicates. When false, the matrix is in finalized mode and supports efficient retrieval operations (e.g., via binary search).</para>
<para><simplesect kind="return"><para>True if the matrix is in fast insertion mode; false if finalized. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2988" column="14" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2988" bodyend="2990"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A sparse matrix implementation using the Coordinate List (COO) format. </para>
    </briefdescription>
    <detaileddescription>
<para>This class stores non-zero elements of a matrix using three parallel vectors: one for row indices, one for column indices, and one for the data values. It supports two operational modes:</para>
<para><itemizedlist>
<listitem><para>**Fast Insertion Mode (<computeroutput>fast_set = true</computeroutput>)**: Allows fast, unordered appends of (row, column, value) triplets. This mode is ideal for incremental construction of the matrix but requires a call to <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize()</ref></computeroutput> before performing reliable access or update operations.</para>
</listitem><listitem><para>**Finalized Mode (<computeroutput>fast_set = false</computeroutput>)**: Ensures the internal storage is sorted lexicographically by (row, column). Enables efficient binary search for <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" kindref="member">get()</ref></computeroutput>, <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1a30d1204d80d8b51f20217c5af322a2da" kindref="member">update()</ref></computeroutput>, and <computeroutput><ref refid="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44" kindref="member">is_initialized()</ref></computeroutput> methods.</para>
</listitem></itemizedlist>
</para>
<para>The class conforms to a polymorphic base class <computeroutput><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt;T&gt;</computeroutput>, allowing it to be used in a generic matrix interface with other matrix types such as dense or CSR.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric type stored in the matrix (must be <computeroutput>float</computeroutput> or <computeroutput>double</computeroutput>).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <programlisting><codeline><highlight class="normal">SparseCOOMatrix&lt;float&gt;<sp/>mat(3,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">mat.set(0,<sp/>0,<sp/>1.0f);</highlight></codeline>
<codeline><highlight class="normal">mat.set(2,<sp/>1,<sp/>5.0f);</highlight></codeline>
<codeline><highlight class="normal">mat.finalize();</highlight></codeline>
<codeline><highlight class="normal">float<sp/>value<sp/>=<sp/>mat.get(2,<sp/>1);<sp/><sp/>//<sp/>returns<sp/>5.0</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>slt::MatrixBase&lt; T &gt;</label>
        <link refid="classslt_1_1MatrixBase"/>
      </node>
      <node id="1">
        <label>slt::SparseCOOMatrix&lt; T &gt;</label>
        <link refid="classslt_1_1SparseCOOMatrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>slt::MatrixBase&lt; T &gt;</label>
        <link refid="classslt_1_1MatrixBase"/>
      </node>
      <node id="1">
        <label>slt::SparseCOOMatrix&lt; T &gt;</label>
        <link refid="classslt_1_1SparseCOOMatrix"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="2237" column="5" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="2237" bodyend="2991"/>
    <listofallmembers>
      <member refid="classslt_1_1SparseCOOMatrix_1a532cedb759d6e7e633c4a3ad84f17c69" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>clone</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" prot="private" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>col</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>col_index</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>cols</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" prot="private" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>cols_</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" prot="private" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>data</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" prot="private" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>fast_set</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>finalize</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>get</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>is_initialized</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1aeffd4e5b6e6d980855f1dc31d964188b" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>nonzero_count</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1abb078adcd4c95de5d7bddbe438a06316" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator()</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a562d500b4202fbc2afb7123571ac6d60" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator*</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a92b8c482627448d29d112af92da1afb8" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator+</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1add1bd1320cb996c904f3f56d6897c9cf" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator+</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a869a28d52e8cf7658dc8cc87a9bfcc6d" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator-</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a1db595de4e0815f91d5aba9765b942de" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator-</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a8066b8bab1b1db44570b043591547447" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator=</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1ad7851db1ffece701e976625710f88aaf" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator=</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a1dc02d00cac074d3771223b358de6152" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>operator==</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" prot="private" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>row</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>row_index</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>rows</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" prot="private" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>rows_</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>set</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a0ed0440765b5f86cf842ae4b67b46621" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>set_fast</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a5bc2a8f7766afa09ceaf18d83447875f" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>size</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1afdf817cb3a1cfdd63825edd72b7af332" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a0556e77c2ab536d1e9f98924ebc00325" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a1823148f7dd13b5e31c55c218d31f8ab" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1afdf93130e5698de91ab00c3640497e7c" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1ae770b21eed338ffb9befcfdd9980018e" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1aca17fa945fb3d058e784e9c448f257f0" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a6c524c58afeb267a0e3cd0bddc2b9be3" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>SparseCOOMatrix</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a30d1204d80d8b51f20217c5af322a2da" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>update</name></member>
      <member refid="classslt_1_1SparseCOOMatrix_1a7cf8f962d4fa6ec16575c0e7031e3447" prot="public" virt="non-virtual"><scope>slt::SparseCOOMatrix</scope><name>value</name></member>
      <member refid="classslt_1_1MatrixBase_1a3bbb4cd026c2c1da1ba0881c918630b1" prot="public" virt="virtual"><scope>slt::SparseCOOMatrix</scope><name>~MatrixBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
