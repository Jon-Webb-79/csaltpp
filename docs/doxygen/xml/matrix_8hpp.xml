<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="matrix_8hpp" kind="file" language="C++">
    <compoundname>matrix.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">iostream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">cassert</includes>
    <includes local="no">numeric</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="8">
        <label>iomanip</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="5">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>numeric</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="1">
        <label>/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>type_traits</label>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="structslt_1_1simd__traits" prot="public">slt::simd_traits</innerclass>
    <innerclass refid="structslt_1_1simd__traits_3_01float_01_4" prot="public">slt::simd_traits&lt; float &gt;</innerclass>
    <innerclass refid="structslt_1_1simd__traits_3_01double_01_4" prot="public">slt::simd_traits&lt; double &gt;</innerclass>
    <innerclass refid="structslt_1_1simd__ops_3_01float_01_4" prot="public">slt::simd_ops&lt; float &gt;</innerclass>
    <innerclass refid="structslt_1_1simd__ops_3_01double_01_4" prot="public">slt::simd_ops&lt; double &gt;</innerclass>
    <innerclass refid="classslt_1_1MatrixBase" prot="public">slt::MatrixBase</innerclass>
    <innerclass refid="classslt_1_1DenseMatrix" prot="public">slt::DenseMatrix</innerclass>
    <innerclass refid="classslt_1_1SparseCOOMatrix" prot="public">slt::SparseCOOMatrix</innerclass>
    <innerclass refid="structslt_1_1SparseCOOMatrix_1_1COOComparator" prot="private">slt::SparseCOOMatrix::COOComparator</innerclass>
    <innernamespace refid="namespaceslt">slt</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="matrix_8hpp_1ac5a637320d99ebb9eaa016046afb1462" prot="public" static="no">
        <name>SIMD_WIDTH_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="40" column="18" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="matrix_8hpp_1aeda68842866e63a7a2cbcd69ac99a1ba" prot="public" static="no">
        <name>SIMD_WIDTH_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="41" column="17" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>File:<sp/><sp/><sp/><sp/>matrix.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Purpose:<sp/>Describe<sp/>the<sp/>file<sp/>purpose<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Source<sp/>Metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Author:<sp/><sp/>Jonathan<sp/>A.<sp/>Webb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Date:<sp/><sp/><sp/><sp/>May<sp/>31,<sp/>2025</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Version:<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Copyright:<sp/>Copyright<sp/>2022,<sp/>Jon<sp/>Webb<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>modules<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DENSE_MATRIX_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DENSE_MATRIX_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;immintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SIMD_WIDTH_FLOAT<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SIMD_WIDTH_DOUBLE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;emmintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SIMD_WIDTH_FLOAT<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SIMD_WIDTH_DOUBLE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="matrix_8hpp_1ac5a637320d99ebb9eaa016046afb1462" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SIMD_WIDTH_FLOAT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="matrix_8hpp_1aeda68842866e63a7a2cbcd69ac99a1ba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>SIMD_WIDTH_DOUBLE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="namespaceslt" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceslt" kindref="compound">slt</ref><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIMD<sp/>traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="55" refid="structslt_1_1simd__traits" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits</ref><sp/>{</highlight></codeline>
<codeline lineno="56" refid="structslt_1_1simd__traits_1a4250fe797cbbc73a64195b10f199f277" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__traits_1a4250fe797cbbc73a64195b10f199f277" kindref="member">supported</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57" refid="structslt_1_1simd__traits_1a4d27bcf5a07aeaa4ee8af03ce93ee830" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>std::size_t<sp/><ref refid="structslt_1_1simd__traits_1a4d27bcf5a07aeaa4ee8af03ce93ee830" kindref="member">width</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="66" refid="structslt_1_1simd__traits_3_01float_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits</ref>&lt;float&gt;<sp/>{</highlight></codeline>
<codeline lineno="67" refid="structslt_1_1simd__traits_3_01float_01_4_1a5a93a5c78c385d2bc7ebd6b666bfed85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__traits_1a4250fe797cbbc73a64195b10f199f277" kindref="member">supported</ref><sp/>=<sp/><ref refid="matrix_8hpp_1ac5a637320d99ebb9eaa016046afb1462" kindref="member">SIMD_WIDTH_FLOAT</ref><sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="68" refid="structslt_1_1simd__traits_3_01float_01_4_1afa2403bb9a5dfc19b049411b086cfd19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>std::size_t<sp/><ref refid="structslt_1_1simd__traits_1a4d27bcf5a07aeaa4ee8af03ce93ee830" kindref="member">width</ref><sp/>=<sp/><ref refid="matrix_8hpp_1ac5a637320d99ebb9eaa016046afb1462" kindref="member">SIMD_WIDTH_FLOAT</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="77" refid="structslt_1_1simd__traits_3_01double_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="78" refid="structslt_1_1simd__traits_3_01double_01_4_1a75f74bc34f655f384bde66b16b7d037b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__traits_1a4250fe797cbbc73a64195b10f199f277" kindref="member">supported</ref><sp/>=<sp/><ref refid="matrix_8hpp_1aeda68842866e63a7a2cbcd69ac99a1ba" kindref="member">SIMD_WIDTH_DOUBLE</ref><sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="79" refid="structslt_1_1simd__traits_3_01double_01_4_1ab3d62b6363071eba5c30e8e7f94d0dda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>std::size_t<sp/><ref refid="structslt_1_1simd__traits_1a4d27bcf5a07aeaa4ee8af03ce93ee830" kindref="member">width</ref><sp/>=<sp/><ref refid="matrix_8hpp_1aeda68842866e63a7a2cbcd69ac99a1ba" kindref="member">SIMD_WIDTH_DOUBLE</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SIMD<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="structslt_1_1simd__ops" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="95" refid="structslt_1_1simd__ops_3_01float_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops</ref>&lt;float&gt;<sp/>{</highlight></codeline>
<codeline lineno="106" refid="structslt_1_1simd__ops_3_01float_01_4_1a7597b0ad2b0cb908f4fd24d2f12be194" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1a7597b0ad2b0cb908f4fd24d2f12be194" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vb<sp/>=<sp/>_mm256_loadu_ps(&amp;b[i]);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_add_ps(va,<sp/>vb);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vb<sp/>=<sp/>_mm_loadu_ps(&amp;b[i]);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_add_ps(va,<sp/>vb);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>+<sp/>b[i];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="structslt_1_1simd__ops_3_01float_01_4_1aca185f730c6c5e134d7ef0cfc4da57be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1aca185f730c6c5e134d7ef0cfc4da57be" kindref="member">sub</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vb<sp/>=<sp/>_mm256_loadu_ps(&amp;b[i]);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_sub_ps(va,<sp/>vb);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vb<sp/>=<sp/>_mm_loadu_ps(&amp;b[i]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_sub_ps(va,<sp/>vb);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>-<sp/>b[i];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="structslt_1_1simd__ops_3_01float_01_4_1ad296daef24aeaa7f7bc90bb57fcc18d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1ad296daef24aeaa7f7bc90bb57fcc18d8" kindref="member">add_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vscalar<sp/>=<sp/>_mm256_set1_ps(scalar);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_add_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vscalar<sp/>=<sp/>_mm_set1_ps(scalar);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_add_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>+<sp/>scalar;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="structslt_1_1simd__ops_3_01float_01_4_1a638dbfe77f48ab6b89eee026bd4dc871" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1a638dbfe77f48ab6b89eee026bd4dc871" kindref="member">sub_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vscalar<sp/>=<sp/>_mm256_set1_ps(scalar);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_sub_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vscalar<sp/>=<sp/>_mm_set1_ps(scalar);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_sub_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>-<sp/>scalar;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structslt_1_1simd__ops_3_01float_01_4_1a81ce9a3a38c4817498a5d9ac03cadd8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1a81ce9a3a38c4817498a5d9ac03cadd8e" kindref="member">mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vb<sp/>=<sp/>_mm256_loadu_ps(&amp;b[i]);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_mul_ps(va,<sp/>vb);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vb<sp/>=<sp/>_mm_loadu_ps(&amp;b[i]);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_mul_ps(va,<sp/>vb);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>*<sp/>b[i];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="structslt_1_1simd__ops_3_01float_01_4_1a164cccde4f979b0f350db5ef95e9d23c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1a164cccde4f979b0f350db5ef95e9d23c" kindref="member">mul_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vscalar<sp/>=<sp/>_mm256_set1_ps(scalar);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_mul_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vscalar<sp/>=<sp/>_mm_set1_ps(scalar);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_mul_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>*<sp/>scalar;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="structslt_1_1simd__ops_3_01float_01_4_1ae43d2cb69f10735f5ea593e45fc81e9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1ae43d2cb69f10735f5ea593e45fc81e9f" kindref="member">div_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vscalar<sp/>=<sp/>_mm256_set1_ps(scalar);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>va<sp/>=<sp/>_mm256_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>vr<sp/>=<sp/>_mm256_div_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vscalar<sp/>=<sp/>_mm_set1_ps(scalar);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>va<sp/>=<sp/>_mm_loadu_ps(&amp;a[i]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>vr<sp/>=<sp/>_mm_div_ps(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>/<sp/>scalar;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="structslt_1_1simd__ops_3_01float_01_4_1a359ae10ad7832341f00ac67dc66d60c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01float_01_4_1a359ae10ad7832341f00ac67dc66d60c2" kindref="member">copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>dst,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>8<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256<sp/>v<sp/>=<sp/>_mm256_loadu_ps(&amp;src[i]);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_ps(&amp;dst[i],<sp/>v);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128<sp/>v<sp/>=<sp/>_mm_loadu_ps(&amp;src[i]);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_ps(&amp;dst[i],<sp/>v);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[i]<sp/>=<sp/>src[i];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="378" refid="structslt_1_1simd__ops_3_01double_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="structslt_1_1simd__ops_3_01double_01_4_1a85e9fbbe61eb45ed87396cd008e4c6e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1a85e9fbbe61eb45ed87396cd008e4c6e9" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vb<sp/>=<sp/>_mm256_loadu_pd(&amp;b[i]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_add_pd(va,<sp/>vb);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vb<sp/>=<sp/>_mm_loadu_pd(&amp;b[i]);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_add_pd(va,<sp/>vb);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>+<sp/>b[i];</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="structslt_1_1simd__ops_3_01double_01_4_1af6a73beccbd3b9c1f211115ba9221b81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1af6a73beccbd3b9c1f211115ba9221b81" kindref="member">sub</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vb<sp/>=<sp/>_mm256_loadu_pd(&amp;b[i]);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_sub_pd(va,<sp/>vb);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vb<sp/>=<sp/>_mm_loadu_pd(&amp;b[i]);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_sub_pd(va,<sp/>vb);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>-<sp/>b[i];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="structslt_1_1simd__ops_3_01double_01_4_1a55bfd15862ac15532e8b6e4d30cc4e34" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1a55bfd15862ac15532e8b6e4d30cc4e34" kindref="member">add_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vscalar<sp/>=<sp/>_mm256_set1_pd(scalar);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_add_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vscalar<sp/>=<sp/>_mm_set1_pd(scalar);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_add_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>+<sp/>scalar;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="structslt_1_1simd__ops_3_01double_01_4_1a39da9d8f58ffa9f5a8adec5ee3598fdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1a39da9d8f58ffa9f5a8adec5ee3598fdf" kindref="member">sub_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vscalar<sp/>=<sp/>_mm256_set1_pd(scalar);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_sub_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vscalar<sp/>=<sp/>_mm_set1_pd(scalar);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_sub_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>-<sp/>scalar;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="structslt_1_1simd__ops_3_01double_01_4_1a90395fccc7a84b13a53137da522c0ff7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1a90395fccc7a84b13a53137da522c0ff7" kindref="member">mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vb<sp/>=<sp/>_mm256_loadu_pd(&amp;b[i]);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_mul_pd(va,<sp/>vb);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vb<sp/>=<sp/>_mm_loadu_pd(&amp;b[i]);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_mul_pd(va,<sp/>vb);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>*<sp/>b[i];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="structslt_1_1simd__ops_3_01double_01_4_1a0eaaa48792cdca282ffd674945f7402f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1a0eaaa48792cdca282ffd674945f7402f" kindref="member">mul_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vscalar<sp/>=<sp/>_mm256_set1_pd(scalar);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_mul_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vscalar<sp/>=<sp/>_mm_set1_pd(scalar);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_mul_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>*<sp/>scalar;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="structslt_1_1simd__ops_3_01double_01_4_1ab5920939f0334286d497d22f7af1b4c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1ab5920939f0334286d497d22f7af1b4c2" kindref="member">div_scalar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scalar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>result,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vscalar<sp/>=<sp/>_mm256_set1_pd(scalar);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>va<sp/>=<sp/>_mm256_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>vr<sp/>=<sp/>_mm256_div_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vscalar<sp/>=<sp/>_mm_set1_pd(scalar);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>va<sp/>=<sp/>_mm_loadu_pd(&amp;a[i]);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>vr<sp/>=<sp/>_mm_div_pd(va,<sp/>vscalar);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;result[i],<sp/>vr);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>a[i]<sp/>/<sp/>scalar;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="structslt_1_1simd__ops_3_01double_01_4_1aefc3b0ab36d4df193e863d75ec83f054" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1simd__ops_3_01double_01_4_1aefc3b0ab36d4df193e863d75ec83f054" kindref="member">copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>dst,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVX2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>4<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>v<sp/>=<sp/>_mm256_loadu_pd(&amp;src[i]);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm256_storeu_pd(&amp;dst[i],<sp/>v);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SSE2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>size<sp/>/<sp/>2<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>end;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m128d<sp/>v<sp/>=<sp/>_mm_loadu_pd(&amp;src[i]);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_mm_storeu_pd(&amp;dst[i],<sp/>v);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>end;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst[i]<sp/>=<sp/>src[i];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="662" refid="classslt_1_1MatrixBase" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="667" refid="classslt_1_1MatrixBase_1a3bbb4cd026c2c1da1ba0881c918630b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1MatrixBase_1a3bbb4cd026c2c1da1ba0881c918630b1" kindref="member">~MatrixBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="classslt_1_1MatrixBase_1af5247088bf3743574e25430da458ff46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classslt_1_1MatrixBase_1af5247088bf3743574e25430da458ff46" kindref="member">rows</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="683" refid="classslt_1_1MatrixBase_1acee40c97e44474a9619b808b63d1868b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classslt_1_1MatrixBase_1acee40c97e44474a9619b808b63d1868b" kindref="member">cols</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="693" refid="classslt_1_1MatrixBase_1a5fe460dc2d97ee440c32635d5f3192fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classslt_1_1MatrixBase_1a5fe460dc2d97ee440c32635d5f3192fc" kindref="member">get</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="classslt_1_1MatrixBase_1a2925cbdba8ec46c258f8d8e1fb1b730d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1MatrixBase_1a2925cbdba8ec46c258f8d8e1fb1b730d" kindref="member">set</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col,<sp/>T<sp/>value)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="classslt_1_1MatrixBase_1a10ca9a5de506b53de715596507c77321" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;MatrixBase&lt;T&gt;&gt;<sp/><ref refid="classslt_1_1MatrixBase_1a10ca9a5de506b53de715596507c77321" kindref="member">clone</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="classslt_1_1MatrixBase_1a069249b28295c9776df81efed6076589" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1MatrixBase_1a069249b28295c9776df81efed6076589" kindref="member">is_initialized</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="classslt_1_1MatrixBase_1a56cfa6060fc56b9225e26f0206a77519" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classslt_1_1MatrixBase_1a56cfa6060fc56b9225e26f0206a77519" kindref="member">nonzero_count</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="737" refid="classslt_1_1MatrixBase_1a9240f5b4144ddf0e284e44b61b10fa49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classslt_1_1MatrixBase_1a9240f5b4144ddf0e284e44b61b10fa49" kindref="member">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dense<sp/>matrix<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="752" refid="classslt_1_1DenseMatrix" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>double&gt;,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DenseMatrix<sp/>only<sp/>supports<sp/>float<sp/>or<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="757" refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>;<sp/></highlight></codeline>
<codeline lineno="758" refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>;<sp/></highlight></codeline>
<codeline lineno="759" refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="760" refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="768" refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>;}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="800" refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data();}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="832" refid="classslt_1_1DenseMatrix_1a4cdc9d44da3d03b7941e9eb1eec36340" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/><ref refid="classslt_1_1DenseMatrix_1a4cdc9d44da3d03b7941e9eb1eec36340" kindref="member">data_ptr</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data();}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.data();}</highlight></codeline>
<codeline lineno="867" refid="classslt_1_1DenseMatrix_1a606cc866b91e27c179f7d4087e08116f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="classslt_1_1DenseMatrix_1a606cc866b91e27c179f7d4087e08116f" kindref="member">init_ptr</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.data();}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="897" refid="classslt_1_1DenseMatrix_1a602633d6637e1f90c63d853fba729b43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1DenseMatrix_1a602633d6637e1f90c63d853fba729b43" kindref="member">nonzero_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::count(<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="934" refid="classslt_1_1DenseMatrix_1aefb68f3c5f27bd69a67d1e1f7b51831e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1aefb68f3c5f27bd69a67d1e1f7b51831e" kindref="member">DenseMatrix</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c,<sp/>T<sp/>value)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(r<sp/>*<sp/>c,<sp/>value),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(r<sp/>*<sp/>c,<sp/>1),<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(r),<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(c)<sp/>{}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="972" refid="classslt_1_1DenseMatrix_1a85b119a507ec3de68409be6404505239" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a85b119a507ec3de68409be6404505239" kindref="member">DenseMatrix</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(r<sp/>*<sp/>c,<sp/>0),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(r<sp/>*<sp/>c,<sp/>0),<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(r),<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(c)<sp/>{}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="classslt_1_1DenseMatrix_1a04b54af6e439372387f32809fdb354eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a04b54af6e439372387f32809fdb354eb" kindref="member">DenseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;T&gt;&gt;&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>=<sp/>vec.size();</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>?<sp/>vec[0].size()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.resize(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.resize(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec[i].<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;All<sp/>rows<sp/>must<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>columns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>;<sp/>++j)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>j]<sp/>=<sp/>vec[i][j];</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Rows,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Cols&gt;</highlight></codeline>
<codeline lineno="1033" refid="classslt_1_1DenseMatrix_1a1527e4de225bc7b3537e3c4a1af474f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1527e4de225bc7b3537e3c4a1af474f3" kindref="member">DenseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;std::array&lt;T,<sp/>Cols&gt;,<sp/>Rows&gt;&amp;<sp/>arr)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(Rows<sp/>*<sp/>Cols),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(Rows<sp/>*<sp/>Cols,<sp/>1),<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(Rows),<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(Cols)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Rows;<sp/>++i)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Cols;<sp/>++j)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/>Cols<sp/>+<sp/>j]<sp/>=<sp/>arr[i][j];</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064" refid="classslt_1_1DenseMatrix_1a8cc9938ed4a846403bc6584ee47a9bd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8cc9938ed4a846403bc6584ee47a9bd9" kindref="member">DenseMatrix</ref>(std::initializer_list&lt;std::initializer_list&lt;T&gt;&gt;<sp/>init_list)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>=<sp/>init_list.size();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>?<sp/>init_list.begin()-&gt;size()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.reserve(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.reserve(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>row<sp/>:<sp/>init_list)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.size()<sp/>!=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;All<sp/>rows<sp/>must<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>columns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.insert(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.end(),<sp/>row.begin(),<sp/>row.end());</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.insert(<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>row.size(),<sp/>1);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102" refid="classslt_1_1DenseMatrix_1adcf2b60ad5bd47d6dabaf714dd1f6727" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1adcf2b60ad5bd47d6dabaf714dd1f6727" kindref="member">DenseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>flat_data,<sp/>std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(flat_data),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(flat_data.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>(),<sp/>1),<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(r),<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(c)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flat_data.size()<sp/>!=<sp/>r<sp/>*<sp/>c)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Flat<sp/>data<sp/>size<sp/>does<sp/>not<sp/>match<sp/>matrix<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1135" refid="classslt_1_1DenseMatrix_1a48b3d24ccb26cc6fba021da75cdca42e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a48b3d24ccb26cc6fba021da75cdca42e" kindref="member">DenseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>N&gt;&amp;<sp/>arr,<sp/>std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(arr.begin(),<sp/>arr.end()),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(N,<sp/>1),<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(r),<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(c)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>!=<sp/>r<sp/>*<sp/>c)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Flat<sp/>array<sp/>size<sp/>does<sp/>not<sp/>match<sp/>matrix<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="classslt_1_1DenseMatrix_1ac64fec350273642bd69b2500001c63be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ac64fec350273642bd69b2500001c63be" kindref="member">DenseMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt;T&gt;(),</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>),</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(other.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>),</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(other.<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>),</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(other.<ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182" refid="classslt_1_1DenseMatrix_1acfda95ba96454680c4339e636195c58b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1acfda95ba96454680c4339e636195c58b" kindref="member">DenseMatrix</ref>(<ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase&lt;T&gt;</ref>(),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(std::move(other.data)),</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(std::move(other.init)),</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(std::exchange(other.rows_,<sp/>0)),</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(std::exchange(other.cols_,<sp/>0))<sp/>{}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200" refid="classslt_1_1DenseMatrix_1a4755d6afb58a6cb916b70a153f4aa7ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a4755d6afb58a6cb916b70a153f4aa7ef" kindref="member">DenseMatrix</ref>(std::size_t<sp/>n)<sp/>:<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>(n<sp/>*<sp/>n,<sp/>0),<sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>(n<sp/>*<sp/>n,<sp/>0),<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>(n),<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>(n)<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Size<sp/>of<sp/>identity<sp/>matrix<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>idx<sp/>=<sp/>i<sp/>*<sp/>n<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[idx]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232" refid="classslt_1_1DenseMatrix_1a77c081ccac829706e7b345faf2acf42d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/><ref refid="classslt_1_1DenseMatrix_1a77c081ccac829706e7b345faf2acf42d" kindref="member">operator()</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>c<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>idx<sp/>=<sp/>r<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>value<sp/>is<sp/>not<sp/>initialized,<sp/>we<sp/>assume<sp/>this<sp/>is<sp/>the<sp/>first<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx])</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[idx];</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="classslt_1_1DenseMatrix_1a031fc322b994002ef9c2c10540a99603" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classslt_1_1DenseMatrix_1a031fc322b994002ef9c2c10540a99603" kindref="member">operator()</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>c<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>idx<sp/>=<sp/>r<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>c;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx])</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>access<sp/>uninitialized<sp/>matrix<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[idx];</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296" refid="classslt_1_1DenseMatrix_1a4f16ef2fe485bfeaff37e07be5cbb437" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classslt_1_1DenseMatrix_1a4f16ef2fe485bfeaff37e07be5cbb437" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref><sp/>=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref><sp/>=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339" refid="classslt_1_1DenseMatrix_1a2edb94832d0cb9421cfe9e85b8d56b33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classslt_1_1DenseMatrix_1a2edb94832d0cb9421cfe9e85b8d56b33" kindref="member">operator=</ref>(<ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref><sp/>=<sp/>std::move(other.data);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref><sp/>=<sp/>std::move(other.init);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>=<sp/>std::exchange(other.rows_,<sp/>0);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>=<sp/>std::exchange(other.cols_,<sp/>0);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370" refid="classslt_1_1DenseMatrix_1a01bfb57f1f4c7f11110926bd3625834a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1a01bfb57f1f4c7f11110926bd3625834a" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>addition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::add</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>←<sp/>this<sp/>line<sp/>is<sp/>crucial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>+<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>←<sp/>also<sp/>crucial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404" refid="classslt_1_1DenseMatrix_1a76746086f9f6b50cd82d09b7d648b38e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1a76746086f9f6b50cd82d09b7d648b38e" kindref="member">operator+</ref>(T<sp/>scalar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::add_scalar</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>scalar,<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>+<sp/>scalar;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438" refid="classslt_1_1DenseMatrix_1a64a5482eb0dbba6aa16825fda6eac2ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1a64a5482eb0dbba6aa16825fda6eac2ac" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>subtraction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::sub</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>entries<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>-<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>entry<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471" refid="classslt_1_1DenseMatrix_1a97d52da76847341fc62f9101b961d98d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1a97d52da76847341fc62f9101b961d98d" kindref="member">operator-</ref>(T<sp/>scalar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::sub_scalar</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>scalar,<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>-<sp/>scalar;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>each<sp/>element<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507" refid="classslt_1_1DenseMatrix_1ab28b2210e92edcb57fb8d042e185571f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1ab28b2210e92edcb57fb8d042e185571f" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>element-wise<sp/>multiplication&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::mul</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>*<sp/>other.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540" refid="classslt_1_1DenseMatrix_1a5eea42d2bdb71d69270abed1daf55168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1a5eea42d2bdb71d69270abed1daf55168" kindref="member">operator*</ref>(T<sp/>scalar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::mul_scalar</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>scalar,<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>*<sp/>scalar;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573" refid="classslt_1_1DenseMatrix_1a36182695820d97a3e651f6cdb93faf0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/><ref refid="classslt_1_1DenseMatrix_1a36182695820d97a3e651f6cdb93faf0a" kindref="member">operator/</ref>(T<sp/>scalar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scalar<sp/>==<sp/>T{})<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix</ref><sp/>result(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::div_scalar</ref>(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/>scalar,<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.data(),<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.begin(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>.end(),<sp/>1);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i]<sp/>/<sp/>scalar;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610" refid="classslt_1_1DenseMatrix_1a09a6958aa43a7ead237b48114527ef5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a09a6958aa43a7ead237b48114527ef5b" kindref="member">transpose</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>new_data(<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.size());</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_data[j<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>+<sp/>i]<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>.swap(new_data);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646" refid="classslt_1_1DenseMatrix_1ae7443b52dd5c9229b1e57836c62734e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="classslt_1_1DenseMatrix_1ae7443b52dd5c9229b1e57836c62734e5" kindref="member">inverse</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>!=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Only<sp/>square<sp/>matrices<sp/>can<sp/>be<sp/>inverted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>n<sp/>=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>A(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>I(n,<sp/>n,<sp/>T{});</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(i,<sp/>i,<sp/>T{1});<sp/><sp/></highlight><highlight class="comment">//<sp/>Identity<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pivot<sp/>selection<sp/>(partial<sp/>pivoting)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>pivot<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>max_val<sp/>=<sp/>std::abs(A.<ref refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" kindref="member">get</ref>(i,<sp/>i));</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>val<sp/>=<sp/>std::abs(A.<ref refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" kindref="member">get</ref>(j,<sp/>i));</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;<sp/>max_val)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_val<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivot<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_val<sp/>==<sp/>T{})</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>is<sp/>singular<sp/>and<sp/>cannot<sp/>be<sp/>inverted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>rows<sp/>(corrected)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pivot<sp/>!=<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/>n<sp/>+<sp/>k],<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[pivot<sp/>*<sp/>n<sp/>+<sp/>k]);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(A.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i<sp/>*<sp/>n<sp/>+<sp/>k],<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[pivot<sp/>*<sp/>n<sp/>+<sp/>k]);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(I.data[i<sp/>*<sp/>n<sp/>+<sp/>k],<sp/>I.data[pivot<sp/>*<sp/>n<sp/>+<sp/>k]);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(I.init[i<sp/>*<sp/>n<sp/>+<sp/>k],<sp/>I.init[pivot<sp/>*<sp/>n<sp/>+<sp/>k]);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>pivot<sp/>row</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>pivot_val<sp/>=<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/>n<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>/=<sp/>pivot_val;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[i<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.data[i<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>/=<sp/>pivot_val;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.init[i<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Eliminate<sp/>other<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>i)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>factor<sp/>=<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[j<sp/>*<sp/>n<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[j<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>-=<sp/>factor<sp/>*<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[i<sp/>*<sp/>n<sp/>+<sp/>k];</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A.<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[j<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.data[j<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>-=<sp/>factor<sp/>*<sp/>I.data[i<sp/>*<sp/>n<sp/>+<sp/>k];</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I.init[j<sp/>*<sp/>n<sp/>+<sp/>k]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721" refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736" refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760" refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" kindref="member">get</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>col<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>idx<sp/>=<sp/>row<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>col;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx])</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Accessing<sp/>uninitialized<sp/>matrix<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[idx];</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793" refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col,<sp/>T<sp/>value)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>col<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>idx<sp/>=<sp/>row<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>col;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx])</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>set<sp/>value:<sp/>element<sp/>already<sp/>initialized.<sp/>Use<sp/>update<sp/>instead.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[idx]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826" refid="classslt_1_1DenseMatrix_1ae55af06b38c452c75279bbfe4d0abaf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ae55af06b38c452c75279bbfe4d0abaf4" kindref="member">remove</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>col<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>idx<sp/>=<sp/>row<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>col;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx])<sp/></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>remove<sp/>value:<sp/>element<sp/>not<sp/>initialized.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[idx]<sp/>=<sp/>T{0};<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[idx]<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>uninitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858" refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>col<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Update<sp/>failed:<sp/>index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>index<sp/>=<sp/>row<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>col;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[index]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Update<sp/>failed:<sp/>value<sp/>not<sp/>initialized&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix_1ab63789902cfdc1e5cbf8e0777f5c9fb9" kindref="member">data</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885" refid="classslt_1_1DenseMatrix_1a66bf4b77281db6ded265fc44f8b3a309" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;MatrixBase&lt;T&gt;&gt;<sp/><ref refid="classslt_1_1DenseMatrix_1a66bf4b77281db6ded265fc44f8b3a309" kindref="member">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;DenseMatrix&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919" refid="classslt_1_1DenseMatrix_1a0439627319cdaed291451c4135c33c2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1a0439627319cdaed291451c4135c33c2b" kindref="member">print</ref>(std::ostream&amp;<sp/>os<sp/>=<sp/>std::cout)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setw(10)<sp/>&lt;&lt;<sp/><ref refid="classslt_1_1DenseMatrix_1a77c081ccac829706e7b345faf2acf42d" kindref="member">operator()</ref>(i,<sp/>j)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947" refid="classslt_1_1DenseMatrix_1aecc5061bed3861b391292058e43ae1b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1aecc5061bed3861b391292058e43ae1b2" kindref="member">is_initialized</ref>(std::size_t<sp/>row,<sp/>std::size_t<sp/>col)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a1cee72c413fc6a704706569e9571243d" kindref="member">rows_</ref><sp/>||<sp/>col<sp/>&gt;=<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix_1ae860a596275b6746c9c8e4a39a8671f5" kindref="member">init</ref>[row<sp/>*<sp/><ref refid="classslt_1_1DenseMatrix_1a8ff8f8302614df9bc21407878384eaf2" kindref="member">cols_</ref><sp/>+<sp/>col]<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1964" refid="namespaceslt_1adbc6a9912aba420a4fe67ba6abd729a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/><ref refid="namespaceslt_1adbc6a9912aba420a4fe67ba6abd729a9" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>mat)<sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat.<ref refid="classslt_1_1DenseMatrix_1a0439627319cdaed291451c4135c33c2b" kindref="member">print</ref>(os);</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2000" refid="namespaceslt_1ae726d568aa0e281c4bd86d71f337b8c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1ae726d568aa0e281c4bd86d71f337b8c4" kindref="member">operator+</ref>(T<sp/>scalar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>matrix)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix<sp/>+<sp/>scalar;<sp/><sp/></highlight><highlight class="comment">//<sp/>Leverage<sp/>existing<sp/>member<sp/>operator+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2035" refid="namespaceslt_1ab7a55d8c976eb591ad233a83bffc43ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">slt::DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1ab7a55d8c976eb591ad233a83bffc43ce" kindref="member">operator-</ref>(T<sp/>scalar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">slt::DenseMatrix&lt;T&gt;</ref>&amp;<sp/>matrix)<sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">slt::DenseMatrix&lt;T&gt;</ref><sp/>result(matrix.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>(),<sp/>matrix.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>());</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matrix.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>matrix.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matrix.<ref refid="classslt_1_1DenseMatrix_1aecc5061bed3861b391292058e43ae1b2" kindref="member">is_initialized</ref>(i,<sp/>j))<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(i,<sp/>j,<sp/>scalar<sp/>-<sp/>matrix.<ref refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" kindref="member">get</ref>(i,<sp/>j));</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>not<sp/>initialized,<sp/>skip—result<sp/>stays<sp/>uninitialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2078" refid="namespaceslt_1a7a4f1a42d7dfbc00af75ce9cb1ec6d8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1a7a4f1a42d7dfbc00af75ce9cb1ec6d8b" kindref="member">operator*</ref>(T<sp/>scalar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>matrix)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix<sp/>*<sp/>scalar;<sp/><sp/></highlight><highlight class="comment">//<sp/>Leverage<sp/>member<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2084" refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b,<sp/>std::size_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same&lt;T,<sp/>float&gt;::value<sp/>||<sp/>std::is_same&lt;T,<sp/>double&gt;::value,</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;dot&lt;T&gt;:<sp/>only<sp/>float<sp/>and<sp/>double<sp/>are<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a<sp/>||<sp/>!b)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Null<sp/>pointer<sp/>passed<sp/>to<sp/>dot<sp/>product&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>temp(size);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::mul</ref>(a,<sp/>b,<sp/>temp.data(),<sp/>size);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reduce<sp/>result<sp/>(scalar<sp/>fallback)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>sum<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>temp[i];</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>std::vector<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2104" refid="namespaceslt_1a9910c7975866778b91fc95552ff64c65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.size()<sp/>!=<sp/>b.size())</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Vector<sp/>sizes<sp/>must<sp/>match<sp/>for<sp/>dot<sp/>product.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" kindref="member">dot</ref>(a.data(),<sp/>b.data(),<sp/>a.size());</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>std::array<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="2113" refid="namespaceslt_1ae7431018925bd517b4e5737be4a4308f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>N&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>N&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" kindref="member">dot</ref>(a.data(),<sp/>b.data(),<sp/>N);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2119" refid="namespaceslt_1a4a91f90ca1405d694326b5ec7e8d3be7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceslt_1a4a91f90ca1405d694326b5ec7e8d3be7" kindref="member">cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>b,<sp/>T*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>double&gt;,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>must<sp/>be<sp/>float<sp/>or<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(a<sp/>&amp;&amp;<sp/>b<sp/>&amp;&amp;<sp/>result);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[0]<sp/>=<sp/>a[1]<sp/>*<sp/>b[2]<sp/>-<sp/>a[2]<sp/>*<sp/>b[1];</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[1]<sp/>=<sp/>a[2]<sp/>*<sp/>b[0]<sp/>-<sp/>a[0]<sp/>*<sp/>b[2];</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[2]<sp/>=<sp/>a[0]<sp/>*<sp/>b[1]<sp/>-<sp/>a[1]<sp/>*<sp/>b[0];</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2130" refid="namespaceslt_1ae7ff72be7d69132d3448cd441bca0926" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>3&gt;<sp/><ref refid="namespaceslt_1a4a91f90ca1405d694326b5ec7e8d3be7" kindref="member">cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>3&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;T,<sp/>3&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>double&gt;,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>must<sp/>be<sp/>float<sp/>or<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[1]<sp/>*<sp/>b[2]<sp/>-<sp/>a[2]<sp/>*<sp/>b[1],</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[2]<sp/>*<sp/>b[0]<sp/>-<sp/>a[0]<sp/>*<sp/>b[2],</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[0]<sp/>*<sp/>b[1]<sp/>-<sp/>a[1]<sp/>*<sp/>b[0]</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2142" refid="namespaceslt_1af8ce1187a032f89a2bda89146b18de61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/><ref refid="namespaceslt_1a4a91f90ca1405d694326b5ec7e8d3be7" kindref="member">cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>double&gt;,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>must<sp/>be<sp/>float<sp/>or<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(a.size()<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>b.size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[1]<sp/>*<sp/>b[2]<sp/>-<sp/>a[2]<sp/>*<sp/>b[1],</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[2]<sp/>*<sp/>b[0]<sp/>-<sp/>a[0]<sp/>*<sp/>b[2],</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[0]<sp/>*<sp/>b[1]<sp/>-<sp/>a[1]<sp/>*<sp/>b[0]</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2189" refid="namespaceslt_1a65e705fbd81f19d98c1fcf81ef098e2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1a65e705fbd81f19d98c1fcf81ef098e2c" kindref="member">mat_mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>double&gt;,</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mat_mul<sp/>only<sp/>supports<sp/>float<sp/>or<sp/>double<sp/>types.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>A_rows<sp/>=<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>();</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>A_cols<sp/>=<sp/>A.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>();</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>B_rows<sp/>=<sp/>B.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>();</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>B_cols<sp/>=<sp/>B.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>();</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A_cols<sp/>!=<sp/>B_rows)<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>are<sp/>incompatible<sp/>for<sp/>multiplication.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(A_rows,<sp/>B_cols);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>A_rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>B_cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>row<sp/>i<sp/>of<sp/>A<sp/>and<sp/>column<sp/>j<sp/>of<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>row(A_cols);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>col(A_cols);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>A_cols;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row[k]<sp/>=<sp/>A.<ref refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" kindref="member">get</ref>(i,<sp/>k);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col[k]<sp/>=<sp/>B.<ref refid="classslt_1_1DenseMatrix_1a64113fe72d74abc3e8f957e5f0bbee9e" kindref="member">get</ref>(k,<sp/>j);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(i,<sp/>j,<sp/><ref refid="namespaceslt_1a1edc8aa1413efcf30b6b2317064465a3" kindref="member">dot</ref>(row,<sp/>col));</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2254" refid="classslt_1_1SparseCOOMatrix" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>double&gt;,</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DenseMatrix<sp/>only<sp/>supports<sp/>float<sp/>or<sp/>double&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2258" refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>;<sp/></highlight></codeline>
<codeline lineno="2259" refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="2260" refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>COO<sp/>Specific<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263" refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>;<sp/></highlight></codeline>
<codeline lineno="2264" refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>;<sp/></highlight></codeline>
<codeline lineno="2265" refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparator<sp/>for<sp/>sorting<sp/>and<sp/>binary<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268" refid="structslt_1_1SparseCOOMatrix_1_1COOComparator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structslt_1_1SparseCOOMatrix_1_1COOComparator" kindref="compound">COOComparator</ref><sp/>{</highlight></codeline>
<codeline lineno="2269" refid="structslt_1_1SparseCOOMatrix_1_1COOComparator_1a443e01d2641ec82d3430c70cfa9647bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structslt_1_1SparseCOOMatrix_1_1COOComparator_1a443e01d2641ec82d3430c70cfa9647bf" kindref="member">operator()</ref>(std::pair&lt;std::size_t,<sp/>std::size_t&gt;<sp/>a,</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;std::size_t,<sp/>std::size_t&gt;<sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.first<sp/>&lt;<sp/>b.first<sp/>||<sp/>(a.first<sp/>==<sp/>b.first<sp/>&amp;&amp;<sp/>a.second<sp/>&lt;<sp/>b.second);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2282" refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>*<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>;}<sp/></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313" refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" kindref="member">nonzero_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();}<sp/></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334" refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" kindref="member">row_index</ref>(std::size_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Row<sp/>index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i];</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358" refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" kindref="member">col_index</ref>(std::size_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Column<sp/>index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i];</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382" refid="classslt_1_1SparseCOOMatrix_1ae41de6aa5a303e7997a29c1d4422477b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ae41de6aa5a303e7997a29c1d4422477b" kindref="member">value_index</ref>(std::size_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Value<sp/>index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2398" refid="classslt_1_1SparseCOOMatrix_1afdf817cb3a1cfdd63825edd72b7af332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1afdf817cb3a1cfdd63825edd72b7af332" kindref="member">SparseCOOMatrix</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fastInsert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(r),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(c),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(fastInsert)<sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.reserve(8);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>.reserve(8);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.reserve(8);</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417" refid="classslt_1_1SparseCOOMatrix_1a0556e77c2ab536d1e9f98924ebc00325" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a0556e77c2ab536d1e9f98924ebc00325" kindref="member">SparseCOOMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;T&gt;&gt;&amp;<sp/>vec,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fastInsert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(vec.<ref refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" kindref="member">size</ref>()),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(vec.empty()<sp/>?<sp/>0<sp/>:<sp/>vec[0].<ref refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" kindref="member">size</ref>()),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(fastInsert)<sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec[i].<ref refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;All<sp/>rows<sp/>must<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>columns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec[i][j]<sp/>!=<sp/>T{})<sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(i,<sp/>j,<sp/>vec[i][j]);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Rows,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Cols&gt;</highlight></codeline>
<codeline lineno="2442" refid="classslt_1_1SparseCOOMatrix_1a1823148f7dd13b5e31c55c218d31f8ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1823148f7dd13b5e31c55c218d31f8ab" kindref="member">SparseCOOMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;std::array&lt;T,<sp/>Cols&gt;,<sp/>Rows&gt;&amp;<sp/>arr,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fastInsert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(Rows),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(Cols),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(fastInsert)<sp/>{</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>Cols;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr[i][j]<sp/>!=<sp/>T{})<sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(i,<sp/>j,<sp/>arr[i][j]);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2463" refid="classslt_1_1SparseCOOMatrix_1afdf93130e5698de91ab00c3640497e7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1afdf93130e5698de91ab00c3640497e7c" kindref="member">SparseCOOMatrix</ref>(std::initializer_list&lt;std::initializer_list&lt;T&gt;&gt;<sp/>initList,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fastInsert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(initList.<ref refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" kindref="member">size</ref>()),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(initList.begin()-&gt;<ref refid="classslt_1_1SparseCOOMatrix_1adc0211d7a6ffae48b7e796d5f9dacd15" kindref="member">size</ref>()),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(fastInsert)<sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>rowList<sp/>:<sp/>initList)<sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rowList.size()<sp/>!=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;All<sp/>rows<sp/>must<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>columns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val<sp/>:<sp/>rowList)<sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>T{})</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(i,<sp/>j,<sp/>val);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++j;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493" refid="classslt_1_1SparseCOOMatrix_1ae770b21eed338ffb9befcfdd9980018e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ae770b21eed338ffb9befcfdd9980018e" kindref="member">SparseCOOMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>flat_data,<sp/>std::size_t<sp/>r,<sp/>std::size_t<sp/>c,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fastInsert<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(r),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(c),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(fastInsert)<sp/>{</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flat_data.size()<sp/>!=<sp/>r<sp/>*<sp/>c)</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Flat<sp/>data<sp/>size<sp/>does<sp/>not<sp/>match<sp/>matrix<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>r;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>c;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>val<sp/>=<sp/>flat_data[i<sp/>*<sp/>c<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>!=<sp/>T{})</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(i,<sp/>j,<sp/>val);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519" refid="classslt_1_1SparseCOOMatrix_1aca17fa945fb3d058e784e9c448f257f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aca17fa945fb3d058e784e9c448f257f0" kindref="member">SparseCOOMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase</ref>&lt;T&gt;(),</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>(other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>),</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(other.<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>),</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(other.<ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>),</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>(other.<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>),</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>(other.<ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>),</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(other.<ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>){}</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544" refid="classslt_1_1SparseCOOMatrix_1a6c524c58afeb267a0e3cd0bddc2b9be3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a6c524c58afeb267a0e3cd0bddc2b9be3" kindref="member">SparseCOOMatrix</ref>(<ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classslt_1_1MatrixBase" kindref="compound">MatrixBase&lt;T&gt;</ref>(),</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>(std::move(other.data)),</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>(std::exchange(other.rows_,<sp/>0)),</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>(std::exchange(other.cols_,<sp/>0)),</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>(std::move(other.row)),</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>(std::move(other.col)),</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>(std::exchange(other.fast_set,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{}</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566" refid="classslt_1_1SparseCOOMatrix_1abb078adcd4c95de5d7bddbe438a06316" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classslt_1_1SparseCOOMatrix_1abb078adcd4c95de5d7bddbe438a06316" kindref="member">operator()</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" kindref="member">get</ref>(r,<sp/>c);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607" refid="classslt_1_1SparseCOOMatrix_1a1dc02d00cac074d3771223b358de6152" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1dc02d00cac074d3771223b358de6152" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref><sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref><sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size()<sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size())</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(std::is_floating_point_v&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]<sp/>-<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i])<sp/>&gt;<sp/>1e-6)</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]<sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i])</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637" refid="classslt_1_1SparseCOOMatrix_1a8066b8bab1b1db44570b043591547447" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a8066b8bab1b1db44570b043591547447" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref><sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref><sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref><sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref><sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660" refid="classslt_1_1SparseCOOMatrix_1ad7851db1ffece701e976625710f88aaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ad7851db1ffece701e976625710f88aaf" kindref="member">operator=</ref>(<ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>=<sp/>std::exchange(other.rows_,<sp/>0);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>=<sp/>std::exchange(other.cols_,<sp/>0);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref><sp/>=<sp/>std::exchange(other.fast_set,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref><sp/>=<sp/>std::move(other.row);</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref><sp/>=<sp/>std::move(other.col);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref><sp/>=<sp/>std::move(other.data);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700" refid="classslt_1_1SparseCOOMatrix_1a92b8c482627448d29d112af92da1afb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a92b8c482627448d29d112af92da1afb8" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>addition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>elements<sp/>from<sp/>this<sp/>sparse<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i],<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i],<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>elements<sp/>from<sp/>the<sp/>other<sp/>sparse<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i];</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i];</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="classslt_1_1DenseMatrix_1aecc5061bed3861b391292058e43ae1b2" kindref="member">is_initialized</ref>(r,<sp/>c))</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(r,<sp/>c,<sp/>result(r,<sp/>c)<sp/>+<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(r,<sp/>c,<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740" refid="classslt_1_1SparseCOOMatrix_1add1bd1320cb996c904f3f56d6897c9cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref><sp/><ref refid="classslt_1_1SparseCOOMatrix_1add1bd1320cb996c904f3f56d6897c9cf" kindref="member">operator+</ref>(T<sp/>scalar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>:<sp/>result.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>scalar;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775" refid="classslt_1_1SparseCOOMatrix_1a869a28d52e8cf7658dc8cc87a9bfcc6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a869a28d52e8cf7658dc8cc87a9bfcc6d" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>subtraction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>elements<sp/>from<sp/>this<sp/>sparse<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i],<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i],<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>all<sp/>elements<sp/>from<sp/>the<sp/>other<sp/>sparse<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i];</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i];</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="classslt_1_1DenseMatrix_1aecc5061bed3861b391292058e43ae1b2" kindref="member">is_initialized</ref>(r,<sp/>c))</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(r,<sp/>c,<sp/>result(r,<sp/>c)<sp/>-<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]);</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a06b7efc75ec0ecfa24c628b422f73f53" kindref="member">set</ref>(r,<sp/>c,<sp/>-other.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]);<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;--<sp/>Fix:<sp/>negate<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815" refid="classslt_1_1SparseCOOMatrix_1a1db595de4e0815f91d5aba9765b942de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1db595de4e0815f91d5aba9765b942de" kindref="member">operator-</ref>(T<sp/>scalar)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref><sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>val<sp/>:<sp/>result.<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>-=<sp/>scalar;</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight></codeline>
<codeline lineno="2833" refid="classslt_1_1SparseCOOMatrix_1a562d500b4202fbc2afb7123571ac6d60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a562d500b4202fbc2afb7123571ac6d60" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref><sp/>!=<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>element-wise<sp/>multiplication&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref><sp/>result(<ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>,<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>);</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i];</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i];</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.<ref refid="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44" kindref="member">is_initialized</ref>(r,<sp/>c))<sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>product<sp/>=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i]<sp/>*<sp/>other.<ref refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" kindref="member">get</ref>(r,<sp/>c);</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(r,<sp/>c,<sp/>product);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866" refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" kindref="member">rows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882" refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" kindref="member">cols</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2912" refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a8060856161b5989ab2f30b87d8d5bf71" kindref="member">get</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/>c<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>search<sp/>(O(n))<sp/>for<sp/>unsorted<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i]<sp/>==<sp/>r<sp/>&amp;&amp;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i]<sp/>==<sp/>c)</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[i];</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Accessing<sp/>uninitialized<sp/>matrix<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>search<sp/>(O(log<sp/>n))<sp/>for<sp/>sorted<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>right<sp/>=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.size();</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mid<sp/>=<sp/>left<sp/>+<sp/>(right<sp/>-<sp/>left)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[mid]<sp/>==<sp/>r<sp/>&amp;&amp;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[mid]<sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[mid];</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[mid]<sp/>&lt;<sp/>r<sp/>||<sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[mid]<sp/>==<sp/>r<sp/>&amp;&amp;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[mid]<sp/>&lt;<sp/>c))<sp/>{</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Accessing<sp/>uninitialized<sp/>matrix<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2949" refid="classslt_1_1SparseCOOMatrix_1a532cedb759d6e7e633c4a3ad84f17c69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;MatrixBase&lt;T&gt;&gt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a532cedb759d6e7e633c4a3ad84f17c69" kindref="member">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;SparseCOOMatrix&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971" refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c,<sp/>T<sp/>value)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/>c<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classslt_1_1SparseCOOMatrix_1ab890c296bec63f265a2c1cd167a88eec" kindref="member">fast_set</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fast<sp/>insert:<sp/>append<sp/>without<sp/>duplicate<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.push_back(r);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>.push_back(c);</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.push_back(value);</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>index<sp/>pairs<sp/>to<sp/>search<sp/>safely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::size_t,<sp/>std::size_t&gt;&gt;<sp/>indices;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.reserve(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.size());</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.emplace_back(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[i],<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[i]);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>std::make_pair(r,<sp/>c);</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::lower_bound(indices.begin(),<sp/>indices.end(),<sp/>target);</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>index<sp/>=<sp/>std::distance(indices.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>indices.size()<sp/>&amp;&amp;<sp/>indices[index]<sp/>==<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Value<sp/>already<sp/>set.<sp/>Use<sp/>update()<sp/>instead.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.insert(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.begin()<sp/>+<sp/>index,<sp/>r);</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>.insert(<ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>.begin()<sp/>+<sp/>index,<sp/>c);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.insert(<ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>.begin()<sp/>+<sp/>index,<sp/>value);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022" refid="classslt_1_1SparseCOOMatrix_1a30d1204d80d8b51f20217c5af322a2da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a30d1204d80d8b51f20217c5af322a2da" kindref="member">update</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a82dc765141e8635009ff85e9f1c1b1f6" kindref="member">rows_</ref><sp/>||<sp/>c<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1a1d5ba6c9996a3b093529cc4f135079d5" kindref="member">cols_</ref>)</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>1:<sp/>Binary<sp/>search<sp/>for<sp/>the<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::lower_bound(</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.begin(),<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.end(),</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(r,<sp/>c),</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;size_t,<sp/>size_t&gt;&amp;<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::pair&lt;size_t,<sp/>size_t&gt;{row[i],<sp/>col[i]}<sp/>&lt;<sp/>target;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>index<sp/>=<sp/>std::distance(<ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Step<sp/>2:<sp/>Must<sp/>already<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>.size()<sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1aec54f3c4530a3c503131a2b37b19c5a4" kindref="member">row</ref>[index]<sp/>!=<sp/>r<sp/>||<sp/><ref refid="classslt_1_1SparseCOOMatrix_1ac9ea84ab29c1ac833854de16386b60fb" kindref="member">col</ref>[index]<sp/>!=<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Element<sp/>not<sp/>set<sp/>yet.<sp/>Use<sp/>set()<sp/>first.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a3401da28257fbe2af0fcd501b5fe0ea4" kindref="member">data</ref>[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073" refid="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a889f1c98e467ceb29a74a1fa3efa6d44" kindref="member">is_initialized</ref>(std::size_t<sp/>r,<sp/>std::size_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>rows_<sp/>||<sp/>c<sp/>&gt;=<sp/>cols_)</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fast_set)<sp/>{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>search<sp/>for<sp/>unsorted<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row[i]<sp/>==<sp/>r<sp/>&amp;&amp;<sp/>col[i]<sp/>==<sp/>c)</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>search<sp/>for<sp/>sorted<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>right<sp/>=<sp/>data.size();</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>mid<sp/>=<sp/>left<sp/>+<sp/>(right<sp/>-<sp/>left)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row[mid]<sp/>==<sp/>r<sp/>&amp;&amp;<sp/>col[mid]<sp/>==<sp/>c)</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row[mid]<sp/>&lt;<sp/>r<sp/>||<sp/>(row[mid]<sp/>==<sp/>r<sp/>&amp;&amp;<sp/>col[mid]<sp/>&lt;<sp/>c))</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3114" refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1af2dd10fb10528bb4abee019204d3fc64" kindref="member">finalize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fast_set)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>indices(data.size());</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(indices.begin(),<sp/>indices.end(),<sp/>0);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stable_sort(indices.begin(),<sp/>indices.end(),</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](std::size_t<sp/>a,<sp/>std::size_t<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::tie(row[a],<sp/>col[a])<sp/>&lt;<sp/>std::tie(row[b],<sp/>col[b]);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>sorted_row,<sp/>sorted_col;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>sorted_data;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_row.reserve(row.size());</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_col.reserve(col.size());</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_data.reserve(data.size());</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>idx<sp/>:<sp/>indices)<sp/>{</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_row.push_back(row[idx]);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_col.push_back(col[idx]);</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted_data.push_back(data[idx]);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>std::move(sorted_row);</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>std::move(sorted_col);</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>std::move(sorted_data);</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast_set<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156" refid="classslt_1_1SparseCOOMatrix_1a0ed0440765b5f86cf842ae4b67b46621" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix_1a0ed0440765b5f86cf842ae4b67b46621" kindref="member">set_fast</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fast_set;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseCOOMatrix<sp/>friend<sp/>functions<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3176" refid="namespaceslt_1aba3b949337f86cced07f922710ac5484" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1aba45a823392432d473bf3ee30c48958a" kindref="member">operator+</ref>(T<sp/>scalar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>matrix)<sp/>{</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matrix<sp/>+<sp/>scalar;<sp/><sp/></highlight><highlight class="comment">//<sp/>Reuse<sp/>member<sp/>operator+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3212" refid="namespaceslt_1ab74ab4d078bb5d1815d13e64e4ad6298" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1aba45a823392432d473bf3ee30c48958a" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>dense,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>sparse)<sp/>{</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>()<sp/>!=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" kindref="member">rows</ref>()<sp/>||<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>()<sp/>!=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" kindref="member">cols</ref>())</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>addition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>());</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>dense<sp/>matrix<sp/>data<sp/>to<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::copy</ref>(dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i]<sp/>=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i];</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>entries<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>()<sp/>+<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>sparse<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" kindref="member">nonzero_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" kindref="member">row_index</ref>(i);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" kindref="member">col_index</ref>(i);</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(r,<sp/>c,<sp/>result(r,<sp/>c)<sp/>+<sp/>sparse.value(i));</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3271" refid="namespaceslt_1aba45a823392432d473bf3ee30c48958a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1aba45a823392432d473bf3ee30c48958a" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>sparse,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>dense)<sp/>{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>()<sp/>!=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" kindref="member">rows</ref>()<sp/>||<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>()<sp/>!=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" kindref="member">cols</ref>())</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>addition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>());</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>dense<sp/>matrix<sp/>data<sp/>to<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::copy</ref>(dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i]<sp/>=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i];</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>entries<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>()<sp/>+<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>sparse<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" kindref="member">nonzero_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" kindref="member">row_index</ref>(i);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" kindref="member">col_index</ref>(i);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(r,<sp/>c,<sp/>result(r,<sp/>c)<sp/>+<sp/>sparse.value(i));</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3325" refid="namespaceslt_1a3840e0b3524470b354e960022f48bcd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1a9269d76bcc65736bfc566ff3c609405e" kindref="member">operator-</ref>(T<sp/>scalar,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>matrix)<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref><sp/>result(matrix.<ref refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" kindref="member">rows</ref>(),<sp/>matrix.<ref refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" kindref="member">cols</ref>());</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"></highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matrix.<ref refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" kindref="member">nonzero_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>matrix.<ref refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" kindref="member">row_index</ref>(i);</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>matrix.<ref refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" kindref="member">col_index</ref>(i);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>val<sp/>=<sp/>scalar<sp/>-<sp/>matrix.value(i);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1SparseCOOMatrix_1ab948cfcf480803e9469c735807d31d6e" kindref="member">set</ref>(r,<sp/>c,<sp/>val);</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3364" refid="namespaceslt_1a24443a933fbac935cc2f22733147f920" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1a9269d76bcc65736bfc566ff3c609405e" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>sparse,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>dense)<sp/>{</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sparse.<ref refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" kindref="member">rows</ref>()<sp/>!=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>()<sp/>||<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" kindref="member">cols</ref>()<sp/>!=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>())</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>subtraction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>());</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Negate<sp/>dense<sp/>matrix<sp/>and<sp/>store<sp/>in<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::mul_scalar</ref>(dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>();<sp/>++i)</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i]<sp/>=<sp/>-dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i];</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>entries<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>()<sp/>+<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>sparse<sp/>matrix<sp/>values<sp/>to<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" kindref="member">nonzero_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" kindref="member">row_index</ref>(i);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" kindref="member">col_index</ref>(i);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(r,<sp/>c,<sp/>result(r,<sp/>c)<sp/>+<sp/>sparse.value(i));</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3417" refid="namespaceslt_1a9269d76bcc65736bfc566ff3c609405e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/><ref refid="namespaceslt_1a9269d76bcc65736bfc566ff3c609405e" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref>&amp;<sp/>dense,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classslt_1_1SparseCOOMatrix" kindref="compound">SparseCOOMatrix&lt;T&gt;</ref>&amp;<sp/>sparse)<sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sparse.<ref refid="classslt_1_1SparseCOOMatrix_1aa8f0e3fdab670152566ce8353a9c42fa" kindref="member">rows</ref>()<sp/>!=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>()<sp/>||<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a1ccef3397e1eeb5c9a4a1e895ff25866" kindref="member">cols</ref>()<sp/>!=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Matrix<sp/>dimensions<sp/>must<sp/>match<sp/>for<sp/>subtraction&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classslt_1_1DenseMatrix" kindref="compound">DenseMatrix&lt;T&gt;</ref><sp/>result(dense.<ref refid="classslt_1_1DenseMatrix_1ae6666df109b2705e298cae85028014b6" kindref="member">rows</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1ac182317252d8e104ea9be539358fe1b2" kindref="member">cols</ref>());</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>dense<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>constexpr<sp/>(<ref refid="structslt_1_1simd__traits" kindref="compound">simd_traits&lt;T&gt;::supported</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops&lt;T&gt;::copy</ref>(dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>(),<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i]<sp/>=<sp/>dense.<ref refid="classslt_1_1DenseMatrix_1a529848163b44a2168460198adda171f7" kindref="member">data_ptr</ref>()[i];</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>entries<sp/>as<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>(),<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a631142d8a7cbb38a6e8210569e8605d4" kindref="member">init_ptr</ref>()<sp/>+<sp/>result.<ref refid="classslt_1_1DenseMatrix_1a39a9fb8ff6233685c347386728cf7ef7" kindref="member">size</ref>(),<sp/>1);</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Subtract<sp/>sparse<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a5daf5e8c69cd9f68f468cd41e06cd45e" kindref="member">nonzero_count</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>r<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a26f9d4289054f90dc5248edee3385f2d" kindref="member">row_index</ref>(i);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>c<sp/>=<sp/>sparse.<ref refid="classslt_1_1SparseCOOMatrix_1a0d82d6bb156ed5dbb372bb7c8155b7d5" kindref="member">col_index</ref>(i);</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="classslt_1_1DenseMatrix_1aa051172f51cb694e62d2ac92212e2b42" kindref="member">update</ref>(r,<sp/>c,<sp/>result(r,<sp/>c)<sp/>-<sp/>sparse.value(i));</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3445"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>slt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MATRIX_HPP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>================================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eof</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp"/>
  </compounddef>
</doxygen>
