<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structslt_1_1simd__ops_3_01double_01_4" kind="struct" language="C++" prot="public">
    <compoundname>slt::simd_ops&lt; double &gt;</compoundname>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1a85e9fbbe61eb45ed87396cd008e4c6e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::add</definition>
        <argsstring>(const double *a, const double *b, double *result, std::size_t size)</argsstring>
        <name>add</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Adds two double arrays element-wise. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] + b[i]</computeroutput> for all elements. Uses AVX or SSE2 where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the arrays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="390" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="390" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1af6a73beccbd3b9c1f211115ba9221b81" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::sub</definition>
        <argsstring>(const double *a, const double *b, double *result, std::size_t size)</argsstring>
        <name>sub</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Subtracts two double arrays element-wise. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] - b[i]</computeroutput> for all elements. Uses AVX or SSE2 where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the arrays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="425" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="425" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1a55bfd15862ac15532e8b6e4d30cc4e34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::add_scalar</definition>
        <argsstring>(const double *a, double scalar, double *result, std::size_t size)</argsstring>
        <name>add_scalar</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Adds a scalar to each element of a double array. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] + scalar</computeroutput> for all elements. SIMD-accelerated where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="460" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="460" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1a39da9d8f58ffa9f5a8adec5ee3598fdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::sub_scalar</definition>
        <argsstring>(const double *a, double scalar, double *result, std::size_t size)</argsstring>
        <name>sub_scalar</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Subtracts a scalar from each element of a double array. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] - scalar</computeroutput> for all elements. SIMD-accelerated where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to subtract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="495" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="495" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1a90395fccc7a84b13a53137da522c0ff7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::mul</definition>
        <argsstring>(const double *a, const double *b, double *result, std::size_t size)</argsstring>
        <name>mul</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Performs SIMD-accelerated element-wise multiplication of two double arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiplies each corresponding element of arrays <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>, storing the result in <computeroutput>result</computeroutput>. Uses AVX or SSE where available, and falls back to scalar processing otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="531" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="531" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1a0eaaa48792cdca282ffd674945f7402f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::mul_scalar</definition>
        <argsstring>(const double *a, double scalar, double *result, std::size_t size)</argsstring>
        <name>mul_scalar</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Performs SIMD-accelerated scalar multiplication on a double array. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiplies each element in array <computeroutput>a</computeroutput> by the scalar <computeroutput>scalar</computeroutput>, storing the result in <computeroutput>result</computeroutput>. Uses AVX or SSE where available, and falls back to scalar processing otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to multiply each element by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="567" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="567" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1ab5920939f0334286d497d22f7af1b4c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::div_scalar</definition>
        <argsstring>(const double *a, double scalar, double *result, std::size_t size)</argsstring>
        <name>div_scalar</name>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Divides each element of a double array by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] / scalar</computeroutput> for all elements. Utilizes AVX or SSE SIMD instructions for hardware-accelerated performance where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input double array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double scalar divisor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output double array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Division by zero is undefined and may result in NaN or Inf. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="605" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="605" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01double_01_4_1aefc3b0ab36d4df193e863d75ec83f054" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; double &gt;::copy</definition>
        <argsstring>(const double *src, double *dst, std::size_t size)</argsstring>
        <name>copy</name>
        <param>
          <type>const double *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="630" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="630" bodyend="648"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SIMD-accelerated operations for double arrays. </para>
    </briefdescription>
    <detaileddescription>
<para>This specialization of <ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops</ref> provides AVX, SSE2, or fallback implementations of basic arithmetic operations for <computeroutput>double</computeroutput> arrays. Used to accelerate matrix operations. </para>
    </detaileddescription>
    <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="378" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="378" bodyend="649"/>
    <listofallmembers>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1a85e9fbbe61eb45ed87396cd008e4c6e9" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>add</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1a55bfd15862ac15532e8b6e4d30cc4e34" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>add_scalar</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1aefc3b0ab36d4df193e863d75ec83f054" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>copy</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1ab5920939f0334286d497d22f7af1b4c2" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>div_scalar</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1a90395fccc7a84b13a53137da522c0ff7" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>mul</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1a0eaaa48792cdca282ffd674945f7402f" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>mul_scalar</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1af6a73beccbd3b9c1f211115ba9221b81" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>sub</name></member>
      <member refid="structslt_1_1simd__ops_3_01double_01_4_1a39da9d8f58ffa9f5a8adec5ee3598fdf" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; double &gt;</scope><name>sub_scalar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
