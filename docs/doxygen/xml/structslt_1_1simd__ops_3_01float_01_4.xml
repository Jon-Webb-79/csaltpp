<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structslt_1_1simd__ops_3_01float_01_4" kind="struct" language="C++" prot="public">
    <compoundname>slt::simd_ops&lt; float &gt;</compoundname>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1a7597b0ad2b0cb908f4fd24d2f12be194" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::add</definition>
        <argsstring>(const float *a, const float *b, float *result, std::size_t size)</argsstring>
        <name>add</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Adds two float arrays element-wise. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] + b[i]</computeroutput> for all elements. Uses AVX or SSE where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the arrays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="106" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="106" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1aca185f730c6c5e134d7ef0cfc4da57be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::sub</definition>
        <argsstring>(const float *a, const float *b, float *result, std::size_t size)</argsstring>
        <name>sub</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Subtracts two float arrays element-wise. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] - b[i]</computeroutput> for all elements. Uses AVX or SSE where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the arrays. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="141" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="141" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1ad296daef24aeaa7f7bc90bb57fcc18d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::add_scalar</definition>
        <argsstring>(const float *a, float scalar, float *result, std::size_t size)</argsstring>
        <name>add_scalar</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Adds a scalar to each element of a float array. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] + scalar</computeroutput> for all elements. SIMD-accelerated where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="176" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="176" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1a638dbfe77f48ab6b89eee026bd4dc871" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::sub_scalar</definition>
        <argsstring>(const float *a, float scalar, float *result, std::size_t size)</argsstring>
        <name>sub_scalar</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Subtracts a scalar from each element of a float array. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] - scalar</computeroutput> for all elements. SIMD-accelerated where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to subtract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="211" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="211" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1a81ce9a3a38c4817498a5d9ac03cadd8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::mul</definition>
        <argsstring>(const float *a, const float *b, float *result, std::size_t size)</argsstring>
        <name>mul</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Performs SIMD-accelerated element-wise multiplication of two float arrays. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiplies each corresponding element of arrays <computeroutput>a</computeroutput> and <computeroutput>b</computeroutput>, storing the result in <computeroutput>result</computeroutput>. Uses AVX or SSE where available, and falls back to scalar processing otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="247" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="247" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1a164cccde4f979b0f350db5ef95e9d23c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::mul_scalar</definition>
        <argsstring>(const float *a, float scalar, float *result, std::size_t size)</argsstring>
        <name>mul_scalar</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Performs SIMD-accelerated scalar multiplication on a float array. </para>
        </briefdescription>
        <detaileddescription>
<para>Multiplies each element in array <computeroutput>a</computeroutput> by the scalar <computeroutput>scalar</computeroutput>, storing the result in <computeroutput>result</computeroutput>. Uses AVX or SSE where available, and falls back to scalar processing otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar value to multiply each element by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="283" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="283" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1ae43d2cb69f10735f5ea593e45fc81e9f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::div_scalar</definition>
        <argsstring>(const float *a, float scalar, float *result, std::size_t size)</argsstring>
        <name>div_scalar</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Divides each element of a float array by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs <computeroutput>result[i] = a[i] / scalar</computeroutput> for all elements. Utilizes AVX or SSE SIMD instructions for hardware-accelerated performance where available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the input float array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The float scalar divisor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the output float array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Division by zero is undefined and may result in NaN or Inf. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="321" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="321" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="structslt_1_1simd__ops_3_01float_01_4_1a359ae10ad7832341f00ac67dc66d60c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void slt::simd_ops&lt; float &gt;::copy</definition>
        <argsstring>(const float *src, float *dst, std::size_t size)</argsstring>
        <name>copy</name>
        <param>
          <type>const float *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="346" column="25" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="346" bodyend="364"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SIMD-accelerated operations for float arrays. </para>
    </briefdescription>
    <detaileddescription>
<para>This specialization of <ref refid="structslt_1_1simd__ops" kindref="compound">simd_ops</ref> provides AVX, SSE, or fallback implementations of basic arithmetic operations for <computeroutput>float</computeroutput> arrays. Used to accelerate matrix operations. </para>
    </detaileddescription>
    <location file="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" line="95" column="9" bodyfile="/home/jonwebb/Code_Dev/C++/csalt++/csalt++/include/matrix.hpp" bodystart="95" bodyend="368"/>
    <listofallmembers>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1a7597b0ad2b0cb908f4fd24d2f12be194" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>add</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1ad296daef24aeaa7f7bc90bb57fcc18d8" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>add_scalar</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1a359ae10ad7832341f00ac67dc66d60c2" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>copy</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1ae43d2cb69f10735f5ea593e45fc81e9f" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>div_scalar</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1a81ce9a3a38c4817498a5d9ac03cadd8e" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>mul</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1a164cccde4f979b0f350db5ef95e9d23c" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>mul_scalar</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1aca185f730c6c5e134d7ef0cfc4da57be" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>sub</name></member>
      <member refid="structslt_1_1simd__ops_3_01float_01_4_1a638dbfe77f48ab6b89eee026bd4dc871" prot="public" virt="non-virtual"><scope>slt::simd_ops&lt; float &gt;</scope><name>sub_scalar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
